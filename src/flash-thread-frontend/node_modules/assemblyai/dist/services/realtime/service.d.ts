import { RealtimeTranscriberParams, RealtimeTranscript, PartialTranscript, FinalTranscript, SessionBeginsEventData, AudioData } from "../..";
export declare class RealtimeTranscriber {
    private realtimeUrl;
    private sampleRate;
    private wordBoost?;
    private encoding?;
    private apiKey?;
    private token?;
    private socket?;
    private listeners;
    private sessionTerminatedResolve?;
    constructor(params: RealtimeTranscriberParams);
    private connectionUrl;
    on(event: "open", listener: (event: SessionBeginsEventData) => void): void;
    on(event: "transcript", listener: (transcript: RealtimeTranscript) => void): void;
    on(event: "transcript.partial", listener: (transcript: PartialTranscript) => void): void;
    on(event: "transcript.final", listener: (transcript: FinalTranscript) => void): void;
    on(event: "error", listener: (error: Error) => void): void;
    on(event: "close", listener: (code: number, reason: string) => void): void;
    connect(): Promise<SessionBeginsEventData>;
    sendAudio(audio: AudioData): void;
    stream(): WritableStream<AudioData>;
    close(waitForSessionTermination?: boolean): Promise<void>;
}
/**
 * @deprecated Use RealtimeTranscriber instead
 */
export declare class RealtimeService extends RealtimeTranscriber {
}
